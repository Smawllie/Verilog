module lab_2_Q3(SW, KEY, LEDR, HEX4, HEX5);
   # A = 4 bits B = 4 bits
  input [7:0] SW;
  input [2:0] KEY;
  output [7:0] LEDR;
  output [6:0] HEX4;
  output [6:0] HEX5;


  wire [7:4] a;
  wire [3:0] b;
  assign a = SW[7, 4];
  assign b = SW[3, 0];
  wire [7:0] a_concat_b;
  # This will be used for 5), doesn't need to be done again
  assign a_concat_b = {a, b};

  # 0) Adder from Part II. We can include the carry bit because we have 8 bits available
  wire [9:0] adder_connection
  lab_2_Q2 full_adder(
    .LEDR(adder_connection),
    .SW[7:0](SW[7:0]),
    .SW[8](0),
    );

  # 1) Adder using Verilog addition. wire[4:0] instead of wire[3:0] to contain the carry bit
  wire [4:0] veri_add_connection
  assign veri_add_connection = a + b;

  # 2) A XOR B in lower four bits and A OR B in upper four bits
  wire [7:0] a_xor_or_b;
  wire [3:0] a_xor_b;
  wire [7:4] a_or_b;
  assign a_xor_b = a ^ b;
  assign a_or_b = a | b;
  assign a_xor_or_b = {a_xor_b, a_or_b};

  # 3) OR reduction
  wire or_reduction;
  assign or_reduction = | a_concat_b;

  # 4) AND reduction
  wire and_reduction;
  assign and_reduction = & a_concat_b;

  # 5) Concat. Already done above


  wire [7:0] ALUout;
  # ALUunit
  mux7to1 aluUnit(
    .MuxSelect(KEY[2:0]),
    .MuxInput[0](adder_connection),
    .MuxInput[1](veri_add_connection),
    .MuxInput[2](a_xor_or_b),
    .MuxInput[3](or_reduction),
    .MuxInput[4](and_reduction),
    .MuxInput[5](a_concat_b),
    .MuxInput[6](0),
    .Out(ALUout),
    );

  #HEX5
  lab_1_Part3 hex_five(HEX5, ALUout[7:4]);

  #HEX4
  lab_1_Part3 hex_four(HEX4, ALUout[3:0]);

  #LEDR
  assign LEDR = ALUout;


endmodule
