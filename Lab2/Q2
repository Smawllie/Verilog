module lab_2_Q2(LEDR, SW);
  input [8:0] SW;
  output [9:0] LEDR;

  wire carry1;
  wire carry2;
  wire carry3;

  full_adder fadd1(
    .a(SW[4]),
    .b(SW[0]),
    .cin(SW[8]),
    .s(LEDR[0]),
    .cout(carry1),
    );
  full_adder fadd2(
    .a(SW[5]),
    .b(SW[1]),
    .cin(carry1),
    .s(LEDR[1]),
    .cout(carry2),
    );
  full_adder fadd3(
    .a(SW[6]),
    .b(SW[2]),
    .cin(carry2),
    .s(LEDR[2]),
    .cout(carry3),
    );
  full_adder fadd4(
    .a(SW[7]),
    .b(SW[3]),
    .cin(carry3),
    .s(LEDR[3]),
    .cout(LEDR[9]),
    );

endmodule

module full_adder(a, b, cin, s, cout);
  input a;
  input b;
  input cin;
  output s;
  output cout;

  wire a_xor_b;

  assign a_xor_b = a ^ b;
  assign s = a_xor_b ^ cin;
  mux2to1 my_mux(
    .x(b),
    .y(cin),
    .s(a_xor_b),
    .m(cout),
    );
endmodule;

module mux2to1(x, y, s, m);
    input x; //selected when s is 0
    input y; //selected when s is 1
    input s; //select signal
    output m; //output

    assign m = s & y | ~s & x;
    // OR
    // assign m = s ? y : x;
endmodule
